class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> ans = new ArrayList<>();
        if (digits == null || digits.length() == 0) {
            return ans;
        }

        String[] map = {
            "", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"
        };

        backtrack(digits, 0, map, new StringBuilder(), ans);
        return ans;
    }

    public void backtrack(String digits, int index, String[] map, StringBuilder sb, List<String> ans) {
        if (sb.length() == digits.length()) {
            ans.add(sb.toString());
            return;
        }

        String possible = map[digits.charAt(index) - '0'];
        for (char c : possible.toCharArray()) {
            sb.append(c);
            backtrack(digits, index + 1, map, sb, ans);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}

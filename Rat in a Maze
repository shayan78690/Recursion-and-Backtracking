class Solution {
    public ArrayList<String> findPath(ArrayList<ArrayList<Integer>> mat) {
        ArrayList<String> ans = new ArrayList<>();
        int n = mat.size();
        
        if (n == 0 || mat.get(0).get(0) == 0 || mat.get(n - 1).get(n - 1) == 0) {
            return ans;  
        }

        backtrack(mat, ans, "", 0, 0);
        return ans;
    }
    
    public void backtrack(ArrayList<ArrayList<Integer>> mat, ArrayList<String> ans, String path, int row, int col) {
        int n = mat.size();
        
        if (row < 0 || col < 0 || row >= n || col >= n || mat.get(row).get(col) == 0 || mat.get(row).get(col) == -1) {
            return;
        } 
        
        if (row == n - 1 && col == n - 1) {
            ans.add(path);
            return;
        }
        
        mat.get(row).set(col, -1);
        
        backtrack(mat, ans, path + "D", row + 1, col); 
        backtrack(mat, ans, path + "U", row - 1, col); 
        backtrack(mat, ans, path + "R", row, col + 1); 
        backtrack(mat, ans, path + "L", row, col - 1); 
        
        mat.get(row).set(col, 1);
    }
}















class Solution {
    public ArrayList<String> findPath(ArrayList<ArrayList<Integer>> mat) {
        ArrayList<String> ans = new ArrayList<>();
        int n = mat.size();
        if (n == 0 || mat.get(0).get(0) == 0 || mat.get(n-1).get(n-1) == 0) 
            return ans; // 

        String path = "";
        boolean vis[][] = new boolean[n][n];
        backtrack(mat, ans, path, 0, 0, vis);
        return ans;
    }
    
    public void backtrack(ArrayList<ArrayList<Integer>> mat, ArrayList<String> ans, String path, int row, int col, boolean vis[][]) {
        int n = mat.size();
        
        if (row < 0 || col < 0 || row >= n || col >= n || mat.get(row).get(col) == 0 || vis[row][col]) {
            return;
        } 
        
        if (row == n - 1 && col == n - 1) {
            ans.add(path);
            return;
        }
        
        vis[row][col] = true;
        
        backtrack(mat, ans, path + "D", row + 1, col, vis); 
        backtrack(mat, ans, path + "U", row - 1, col, vis); 
        backtrack(mat, ans, path + "R", row, col + 1, vis); 
        backtrack(mat, ans, path + "L", row, col - 1, vis);
        
        vis[row][col] = false;
    }
}

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<>();
        backtrack("", ans, 0, 0, n);
        return ans;
    }

    public void backtrack(String res, List<String> ans, int open, int close, int n) {
        if(res.length() == 2 * n) {
            ans.add(res);
            return;
        }

        if(open < n) {
            backtrack(res+"(", ans, open+1, close, n);
        }

        if(close < open) {
            backtrack(res+")", ans, open, close+1, n);
        }
    }
}
